#primero los import de un fichero ejecutable
import os
import time
# Despu√©s lasfunciones

# Funci√≥n para imprimir un libro. He hecho esta funci√≥n para evitar c√≥digo repetido
# La funci√≥n recibe un diccionario con la informaci√≥n de un libro y la imprime por pantalla
def imprimir_libro(libro):
    print(f"üìñ Titulo: {libro['Titulo']}")
    print(f"‚úçÔ∏è Autor: {libro['Autor']}")
    print(f"üîë Alquilado: {libro['Alquilado']}")
    print("-------------------")

# Funci√≥n para buscar un libro por t√≠tulo. Devuelve el libro si lo encuentra, None si no lo encuentra
# La funci√≥n recibe una lista de libros y el t√≠tulo del libro a buscar
def buscar_libro_por_titulo(libros, titulo):
    for libro in libros:
        if libro["Titulo"] == titulo:
            return libro
    return None

# Funci√≥n para imprimir los libros (1-Visualizar)
def imprimir_libros(libros):
    for libro in libros:
        imprimir_libro(libro)
        
# Funci√≥n para buscar un libro (2-Buscar)
def buscar_libros(libros):   
    titulo_buscar = input("üîç Introduce el t√≠tulo por favor:")
    libro_buscado = buscar_libro_por_titulo(libros, titulo_buscar)
    
    if libro_buscado:
        print("Libro encontrado")
        imprimir_libro(libro_buscado)
    else:
        print(f"üìö Libro no encontrado en la biblioteca ({titulo_buscar})")
 

# Funci√≥n para a√±adir libro (3-A√±adir)
# A√±adir libro por parte del usuario, tenemos que hacer dentro de la funci√≥n 2 inputs para que el usuario meta
# el titulo y el autor del libro nuevo
def anadir_libro(libros):   
    # Pedir t√≠tulo y autor al usuario
    titulo = input("üìñ Introduce el t√≠tulo del libro:")
    autor = input("‚úçÔ∏è Introduce el autor del libro:")
    
    # Crear un diccionario con la informaci√≥n del nuevo libro
    libro_nuevo = {"üìñ Titulo": titulo, "‚úçÔ∏è Autor": autor, "üîë Alquilado": False}
    
    # A√±adir el libro nuevo a la lista de libros
    libros.append(libro_nuevo)
  
    # Mostrar mensaje de confirmaci√≥n
    print("‚úÖ Se ha a√±adido un nuevo libro a la biblioteca")
    imprimir_libro(libro_nuevo)
    
# Funci√≥n para eliminar libro (4-Eliminar)
def eliminar_libro(libros):   
    titulo_buscar = input("üîë Introduce el libro que quieres eliminar:")
    libro_buscado = buscar_libro_por_titulo(libros, titulo_buscar)
    if libro_buscado:
        libros.remove(libro_buscado)
        print(f"‚úÖ Libro eliminado ({titulo_buscar})")
    else:
        print(f"‚ùå Libro no encontrado para eliminar ({titulo_buscar})")
    
# funci√≥n alquilar libro (5-Alquilar)
def alquilar_libros(libros):   
    titulo_buscar = input("üîë Introduce el libro que quieres alquilar:")
    libro_buscado = buscar_libro_por_titulo(libros, titulo_buscar)
    if libro_buscado:
        libro_buscado["Alquilado"] = True
        print(f"‚úÖ Libro alquilado ({titulo_buscar})")
    else:
        print(f"‚ùå Libro no encontrado para alquilar ({titulo_buscar})")

# funci√≥n devolver libro (6-Devolver)
def devolver_libros(libros):   
    titulo_buscar = input("üîÑ Introduce el libro que quieres devolver:")
    libro_buscado = buscar_libro_por_titulo(libros, titulo_buscar)
    if libro_buscado:
        libro_buscado["Alquilado"] = False
        print(f"‚úÖ Libro devuelto ({titulo_buscar})")
    else:
        print(f"‚ùå Libro no encontrado para devolver ({titulo_buscar})")
        
# Creamos una variable para controlar si el usuario quiere salir del programa
        
# Ahora veremos el resto del c√≥digo del programa
    
# Primero presentamos al usuario las opciones que tendr√° disponible
print("üëã Hola, ¬øQu√© operaci√≥n quieres realizar?")
print("üî¢ Opciones disponibles:")
print()
print("1Ô∏è‚É£ Visualizar todos los libros de la biblioteca")
print("2Ô∏è‚É£ Buscar un libro por t√≠tulo")
print("3Ô∏è‚É£ A√±adir un libro")
print("4Ô∏è‚É£ Eliminar un libro por t√≠tulo")
print("5Ô∏è‚É£ Alquilar un libro por t√≠tulo")
print("6Ô∏è‚É£ Devolver un libro por t√≠tulo")
print("‚û°Ô∏è Salir")
print()

libros = [
    {"Titulo": "Python Data Science Handbook", "Autor": "Jake VanderPlas", "Alquilado": False},
    {"Titulo": "Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow", "Autor": "Aur√©lien G√©ron", "Alquilado": True},
    {"Titulo": "Pattern Recognition and Machine Learning", "Autor": "Christopher M. Bishop", "Alquilado": False},
    {"Titulo": "Deep Learning", "Autor": "Ian Goodfellow, Yoshua Bengio, Aaron Courville", "Alquilado": True},
    {"Titulo": "The Elements of Statistical Learning", "Autor": "Trevor Hastie, Robert Tibshirani, Jerome Friedman", "Alquilado": False},
    {"Titulo": "Data Science for Business", "Autor": "Foster Provost, Tom Fawcett", "Alquilado": False},
    {"Titulo": "Bayesian Data Analysis", "Autor": "Andrew Gelman et al.", "Alquilado": True},
    {"Titulo": "Introduction to the Theory of Computation", "Autor": "Michael Sipser", "Alquilado": False},
    {"Titulo": "Artificial Intelligence: A Modern Approach", "Autor": "Stuart Russell, Peter Norvig", "Alquilado": True},
    {"Titulo": "Computer Vision: Algorithms and Applications", "Autor": "Richard Szeliski", "Alquilado": False},
    {"Titulo": "Data Science from Scratch", "Autor": "Joel Grus", "Alquilado": True},
    {"Titulo": "The Art of Statistics", "Autor": "David Spiegelhalter", "Alquilado": False},
    {"Titulo": "Python Machine Learning", "Autor": "Sebastian Raschka, Vahid Mirjalili", "Alquilado": True},
    {"Titulo": "An Introduction to Statistical Learning", "Autor": "Gareth James, Daniela Witten, Trevor Hastie, Robert Tibshirani", "Alquilado": False},
    {"Titulo": "Fundamentals of Data Engineering", "Autor": "Joe Reis, Matt Housley", "Alquilado": False},
    {"Titulo": "Storytelling with Data", "Autor": "Cole Nussbaumer Knaflic", "Alquilado": True},
    {"Titulo": "Building Machine Learning Powered Applications", "Autor": "Emmanuel Ameisen", "Alquilado": False},
    {"Titulo": "Practical Statistics for Data Scientists", "Autor": "Peter Bruce, Andrew Bruce", "Alquilado": True},
    {"Titulo": "SQL for Data Scientists", "Autor": "Renee M. P. Teate", "Alquilado": False},
    {"Titulo": "Data Engineering on Azure", "Autor": "Vlad Riscutia", "Alquilado": True}
]

# Programa principal
# Bucle para que el usuario pueda realizar las operaciones que desee
salir = False
while not salir:
    opcion = input(" Visualizar / Buscar / A√±adir / Eliminar / Alquilar / Devolver / Salir ")
    # Convertimos la opci√≥n a min√∫sculas para que no haya problemas si el usuario escribe en may√∫sculas
    opcion = opcion.lower()
    # Dependiendo de la opci√≥n que haya elegido el usuario, llamamos a la funci√≥n correspondiente
    # En este caso, he hecho una funci√≥n para cada opci√≥n.
    match opcion:
        case "visualizar":
            imprimir_libros(libros)
        case "buscar":
            buscar_libros(libros)
        case "a√±adir":
            anadir_libro(libros)
        case "eliminar":
            eliminar_libro(libros)
        case "alquilar":
            alquilar_libros(libros)
        case "devolver":
            devolver_libros(libros)
        case "salir":
            salir = True
    time.sleep(20)
    os.system("cls")